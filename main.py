import requests
import numpy as np
import pandas as pd

# Работа с библиотекой requests

requests.get('https://github.com/')
res = requests.get('https://github.com/')
print(res)
# В терминале вывелость 'Response[200]' это значит что запрос проведен успешно
# получаем содержимое с помощью метода content
print(res.content)
# Информацию из байтового вида в строковое можно с помощью метода text
print(res.text)
# Библиотека requests позволяет работать с HTTP запросами любойсложности, используя простой синтаксис.
# Это позволяет не тратить время на написание кода ю и быстро взаимодействовать с серверами.

# Работа с библиотекой numpy
# Это библиотека для работы с многомерными  массивами чаще используют в анализе данных.
# Создадим одномерный массив
np.array([23, 35, 65, 44])
a = np.array([23, 35, 65, 44])
# прибавим к каждому числу прибавим цифру 3, далее вычтем, умножим и поделим
print(a + 3)
print(a - 3)
print(a * 3)
print(a / 3)

# Работа с библиотекой pandas
# Данные в Pandas представлены в двух видах: Series и DataFrame.
# Series — это объект, который похож на одномерный массив и может содержать любые типы данных.
#  Проще всего представить его как столбец таблицы с последовательностью каких-либо значений,
#  у каждого из которых есть индекс — номер строки.
# Создадим простой Series:
series_example = pd.Series([4, 7, -5, 3])  # Создаём объект Series, содержащий числа.
print(series_example)  # Выводим объект на экран.
# Series отображается в виде таблицы с индексами элементов в первом столбце и значениями во втором.
# DataFrame — основной тип данных в Pandas, вокруг которого строится вся работа.
# Его можно представить в виде обычной таблицы с любым количеством столбцов и строк.
# Внутри ячеек такой «таблицы» могут быть данные самого разного типа: числовые, булевы, строковые и так далее.
# У DataFrame есть и индексы строк, и индексы столбцов. Это позволяет удобно сортировать и фильтровать данные,
# а также быстро находить нужные ячейки.
# Создадим простой DataFrame с помощью словаря и посмотрим на его отображение:
city = {'Город': ['Москва', 'Санкт-Петербург', 'Новосибирск', 'Екатеринбург'],
        'Год основания': [1147, 1703, 1893, 1723],
        'Население': [11.9, 4.9, 1.5, 1.4]}  # Создаём словарь с нужной информацией о городах.

df = pd.DataFrame(city)  # Превращаем словарь в DataFrame, используя стандартный метод библиотеки.

print(df)  # Выводим DataFrame на экран.
# Мы видим таблицу, строки которой имеют индексы от 0 до 3, а «индексы» столбцов соответствуют их названиям.
# Легко заметить, что датафрейм состоит из трёх Series: Город, Год основания и Население.
# Оба типа индексов можно использовать для навигации по данным.


